<%- include("./../../shared/header.ejs") %>

<h2><%= title %></h2>

<h3>Force processing of learning paths</h3>

<button id="forceProcess" onclick="process()">Force processing</button>
<button id="updateLog" onclick="updateLog()">Update log</button>

<h3>Log processing output</h3>

<input type="text" id="myInput" onkeyup="filterLog()" placeholder="Search...">

<div id="liveLog"></div>

<ul id="myUL">
    
</ul>

<style>
    #liveLog {
        height: 250px;
        width: 100%;
        border: solid black 1px;
        overflow-y: scroll;
    }

    #myInput {
        background-position: 10px 12px; /* Position the search icon */
        background-repeat: no-repeat; /* Do not repeat the icon image */
        width: 100%; /* Full-width */
        font-size: 16px; /* Increase font-size */
        padding: 12px 20px 12px 40px; /* Add some padding */
        border: 1px solid #ddd; /* Add a grey border */
        margin-bottom: 12px; /* Add some space below the input */
    }

    #myUL {
        /* Remove default list styling */
        list-style-type: none;
        padding: 0;
        margin: 0;
    }

    #myUL li {
        border: 1px solid #ddd; /* Add a border to all links */
        margin-top: -1px; /* Prevent double borders */
        background-color: #f6f6f6; /* Grey background color */
        padding: 12px; /* Add some padding */
        text-decoration: none; /* Remove default text underline */
        font-size: 18px; /* Increase the font-size */
        color: black; /* Add a black text color */
        display: block; /* Make it into a block element to fill the whole list */
    }

    #myUL li a:hover:not(.header) {
        background-color: #eee; /* Add a hover effect to all links, except for headers */
    }
</style>

<script>
    let previousLogLines = []
    let basePath = "<%= basePath %>"
    function filterLog() {
      // Declare variables
      var input, filter, ul, li, a, i, txtValue;
      input = document.getElementById('myInput');
      filter = input.value.toUpperCase();
      ul = document.getElementById("myUL");
      li = ul.getElementsByTagName('li');
    
      // Loop through all list items, and hide those who don't match the search query
      for (i = 0; i < li.length; i++) {
        txtValue = li[i].textContent || li[i].innerText;
        if (txtValue.toUpperCase().indexOf(filter) > -1) {
          li[i].style.display = "";
        } else {
          li[i].style.display = "none";
        }
      }
    }
 
    function updateLiveLog(){
        $.ajax({
            type: "GET",
            url: basePath + '/api/manage/livelogs',
            success: (data) => {
                // When processing is done, the server sends a response
                let lines = JSON.parse(data);
                lines.forEach(line => {
                        if (!previousLogLines.includes(line)){
                            previousLogLines.push(line);
                            $("#liveLog").append($("<div>").html(line))
                            let elem = document.getElementById("liveLog")
                            elem.scrollTop = elem.scrollHeight;
                        }
                    })
                setTimeout(() => {updateLiveLog()}, 500)
            },
            error: (err) => {console.log("An error occured during processing")}
        })
    }

    function resetLog(newLogData){
        ul = document.getElementById("myUL");
        $(ul).empty(); // Clear the list
        newLogData.forEach((element, index, inputArray) => {
            let style = {}
            if (element.includes("[INFO]")){
                style = {
                    "color": "orange"
                }
            }else if (element.includes("[ERROR]")){
                style = {
                    "color": "red"
                }
            }
            let item = $('<li>');
            item.html(element);
            item.css(style);
            $("#myUL").append(item);
        })
    }

    function updateLog(){
        $.ajax({
            type: "GET",
            url: basePath + '/api/manage/logsraw',
            success: (data) => {
                data = data.replace(/\\n/g, "</br>"); // replace newline characters
                let lines = JSON.parse(data);
                resetLog(lines);
            }
        })
    }

    function getLiveLogLines(){
       
    }

    function process(){
        previousLogLines = []
        $("#liveLog").empty()
        // Send a request to the server to start processing
        $.ajax({
            type: "GET",
            url: basePath + '/api/manage/forceProcess',
            success: (data) => {
                // When processing is done, the server sends a response
                if (data == "done"){
                    updateLog();
                } else {
                    console.log("An error occured during processing")
                }
            }
        })
    }
    $(document).ready(() => {
        updateLog();
        updateLiveLog();
    })
</script>

<%- include("./../../shared/footer.ejs") %>